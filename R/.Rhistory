generate_summary_stats <- function(data, var_types = NULL, include_stats = NULL, data_title="") {
# Load packages
suppressPackageStartupMessages({
if (!require("cli")) {
install.packages("cli")
library(cli)
}
})
# Ensure data is a data.frame
data <- as.data.frame(data)
# Function to create histogram plot using spark_bar
create_hist <- function(x) {
hist_info <- hist(x, breaks = 8, plot = FALSE)
bin_width <- unique(diff(hist_info$breaks))
hist_density <- hist_info$density
scaled_density <- round(hist_density * 5 * bin_width, 2)
cli::spark_bar(scaled_density)
}
# Define default included statistics
default_include_stats <- list(
numeric = c("mean", "sd", "p0", "p25", "median", "p75", "p100", "hist"),
categorical = c("n_unique", "top_counts"),
posixct = c("min", "max", "median", "n_unique"),
logical = c("mean", "top_counts"),
character = c("min_char", "max_char", "n_unique", "n_empty", "n_whitespace"),
date = c("min", "max", "median", "n_unique"),
factor = c("n_unique", "top_counts")
)
# Merge provided include_stats with defaults
if (is.null(include_stats)) {
include_stats <- default_include_stats
} else {
include_stats <- modifyList(default_include_stats, include_stats)
}
# Classify variables if var_types is not fully provided
if (!is.null(var_types)) {
all_var_names <- unlist(var_types)
remaining_vars <- setdiff(names(data), all_var_names)
# Classify remaining variables
auto_classified_vars <- list(
numeric = remaining_vars[sapply(data[remaining_vars], is.numeric)],
categorical = remaining_vars[sapply(data[remaining_vars], is.factor) | sapply(data[remaining_vars], is.character)],
posixct = remaining_vars[sapply(data[remaining_vars], inherits, "POSIXct")],
logical = remaining_vars[sapply(data[remaining_vars], is.logical)],
character = remaining_vars[sapply(data[remaining_vars], is.character)],
date = remaining_vars[sapply(data[remaining_vars], inherits, "Date")],
factor = remaining_vars[sapply(data[remaining_vars], is.factor)]
)
# Merge user-provided var_types with auto classified variable types
var_types <- modifyList(auto_classified_vars, var_types)
} else {
# Classify all variables if var_types is not provided
var_types <- list(
numeric = names(data)[sapply(data, is.numeric)],
categorical = names(data)[sapply(data, is.factor) | sapply(data, is.character)],
posixct = names(data)[sapply(data, inherits, "POSIXct")],
logical = names(data)[sapply(data, is.logical)],
character = names(data)[sapply(data, is.character)],
date = names(data)[sapply(data, inherits, "Date")],
factor = names(data)[sapply(data, is.factor)]
)
}
# Initialize result list
result <- list()
# Generate summary statistics for numeric variables
if (!is.null(var_types$numeric)) {
numeric_stats <- lapply(var_types$numeric, function(var) {
x <- data[[var]]
stats <- list(variable = var)
if ("mean" %in% include_stats$numeric) stats$mean <- mean(x, na.rm = TRUE)
if ("sd" %in% include_stats$numeric) stats$sd <- sd(x, na.rm = TRUE)
if ("min" %in% include_stats$numeric) stats$p0 <- min(x, na.rm = TRUE)
if ("p25" %in% include_stats$numeric) stats$p25 <- quantile(x, 0.25, na.rm = TRUE)
if ("median" %in% include_stats$numeric) stats$median <- median(x, na.rm = TRUE)
if ("p75" %in% include_stats$numeric) stats$p75 <- quantile(x, 0.75, na.rm = TRUE)
if ("max" %in% include_stats$numeric) stats$p100 <- max(x, na.rm = TRUE)
if ("hist" %in% include_stats$numeric) stats$hist <- create_hist(x)
return(as.data.frame(stats, stringsAsFactors = FALSE))
})
result$numeric <- do.call(rbind, numeric_stats)
}
# Generate summary statistics for categorical variables
if (!is.null(var_types$categorical)) {
categorical_stats <- lapply(var_types$categorical, function(var) {
x <- data[[var]]
stats <- list(
variable = var
)
if ("n_unique" %in% include_stats$categorical) stats$n_unique <- length(unique(x))
if ("top_counts" %in% include_stats$categorical) {
top_counts <- sort(table(x), decreasing = TRUE)[1:3]
top_counts_perc <- top_counts / sum(top_counts) * 100
stats$top_counts <- paste(names(top_counts), sprintf("%.2f%%", top_counts_perc), sep = ": ", collapse = ", ")
}
})
result$categorical <- do.call(rbind, lapply(categorical_stats, as.data.frame))
}
# Generate summary statistics for POSIXct variables
if (!is.null(var_types$posixct)) {
posixct_stats <- lapply(var_types$posixct, function(var) {
x <- data[[var]]
stats <- list(
variable = var
)
if ("min" %in% include_stats$posixct) stats$min <- min(x, na.rm = TRUE)
if ("max" %in% include_stats$posixct) stats$max <- max(x, na.rm = TRUE)
if ("median" %in% include_stats$posixct) stats$median <- median(x, na.rm = TRUE)
if ("n_unique" %in% include_stats$posixct) stats$n_unique <- length(unique(x))
})
result$posixct <- do.call(rbind, lapply(posixct_stats, as.data.frame))
}
# Generate summary statistics for logical variables
if (!is.null(var_types$logical)) {
logical_stats <- lapply(var_types$logical, function(var) {
x <- data[[var]]
stats <- list(
variable = var
)
if ("mean" %in% include_stats$logical) stats$mean <- mean(x, na.rm = TRUE)
if ("top_counts" %in% include_stats$logical) {
top_counts <- sort(table(x), decreasing = TRUE)
stats$top_counts <- paste(names(top_counts), top_counts, sep = ": ", collapse = ", ")
}
})
result$logical <- do.call(rbind, lapply(logical_stats, as.data.frame))
}
# Generate summary statistics for character variables
if (!is.null(var_types$character)) {
character_stats <- lapply(var_types$character, function(var) {
x <- data[[var]]
stats <- list(
variable = var
)
if ("min_char" %in% include_stats$character) stats$min_char <- min(nchar(x), na.rm = TRUE)
if ("max_char" %in% include_stats$character) stats$max_char <- max(nchar(x), na.rm = TRUE)
if ("n_unique" %in% include_stats$character) stats$n_unique <- length(unique(x))
if ("n_empty" %in% include_stats$character) stats$n_empty <- sum(nchar(x) == 0, na.rm = TRUE)
if ("n_whitespace" %in% include_stats$character) stats$n_whitespace <- sum(nchar(trimws(x)) == 0, na.rm = TRUE)
})
result$character <- do.call(rbind, lapply(character_stats, as.data.frame))
}
# Generate summary statistics for date variables
if (!is.null(var_types$date)) {
date_stats <- lapply(var_types$date, function(var) {
x <- data[[var]]
stats <- list(
variable = var
)
if ("min" %in% include_stats$date) stats$min <- min(x, na.rm = TRUE)
if ("max" %in% include_stats$date) stats$max <- max(x, na.rm = TRUE)
if ("median" %in% include_stats$date) stats$median <- median(x, na.rm = TRUE)
if ("n_unique" %in% include_stats$date) stats$n_unique <- length(unique(x))
})
result$date <- do.call(rbind, lapply(date_stats, as.data.frame))
}
# Generate summary statistics for factor variables
if (!is.null(var_types$factor)) {
factor_stats <- lapply(var_types$factor, function(var) {
x <- data[[var]]
stats <- list(
variable = var
)
if ("ordered" %in% include_stats$factor) stats$ordered <- is.ordered(x)
if ("n_unique" %in% include_stats$factor) stats$n_unique <- length(unique(x))
if ("top_counts" %in% include_stats$factor) {
top_counts <- sort(table(x), decreasing = TRUE)[1:3]
stats$top_counts <- paste(names(top_counts), top_counts, sep = ": ", collapse = ", ")
}
})
result$factor <- do.call(rbind, lapply(factor_stats, as.data.frame))
}
# Title for summary statistics
title <- paste0("Summary Statistics",data_title)
if (data_title!="")  {
title <- paste0("Summary Statistics for ",data_title)
}
# Format for markdown
title <- paste0("## **", title, "**\n")
output <- title
for (var_type in names(result)) {
var_stats <- result[[var_type]]
# Create the markdown table for each variable type
md_table <- knitr::kable(var_stats,
align = "lrrrrrrrr",
row.names = FALSE,
format = "markdown",
digits = 2,
format.args = list(big.mark = ",",
scientific = FALSE))
md_table <- paste(md_table, collapse = "\n")
# Add the table to the output
output <- paste0(output, "\n### ", tools::toTitleCase(var_type), "\n\n", md_table, "\n")
}
# Print the combined output as is in markdown format
knitr::asis_output(output)
}
print(generate_summary_stats(airquality))
hist(airquality$Day)
hist(airquality$Month)
hist(airquality$Day)
hist(airquality$Day, breaks = 8)
hist(airquality$Day, breaks = 8)
print(generate_summary_stats(airquality))
hist_info <- hist(x, breaks = 8, plot = FALSE)
x <- airquality$Day
hist_info <- hist(x, breaks = 8, plot = FALSE)
bin_width <- unique(diff(hist_info$breaks))
hist_density <- hist_info$density
scaled_density <- round(hist_density * 5 * bin_width, 2)
cli::spark_bar(scaled_density)
hist(x, breaks = 8)
x <- airquality$Solar.R
hist_info <- hist(x, breaks = 8, plot = FALSE)
bin_width <- unique(diff(hist_info$breaks))
hist_density <- hist_info$density
scaled_density <- round(hist_density * 5 * bin_width, 2)
cli::spark_bar(scaled_density)
hist(x, breaks = 8)
cli::spark_bar(scaled_density)
scaled_density
scaled_density <- round(hist_density * 10 * bin_width, 2)
cli::spark_bar(scaled_density)
scaled_density <- round(hist_density * 5 * bin_width, 2)
cli::spark_bar(scaled_density)
hist(x, breaks = 8)
cli::spark_bar(scaled_density)
hist(x, breaks = 8)
# Linear Regression
# Load required libraries
library(caret)
install.packages(caret)
install.packages("caret")
# Linear Regression
# Load required libraries
library(caret)
# Split Train and Test data
set.seed(42)
# Define the time point at which to split the data (e.g., 70% for training)
split_time <- quantile(unique(dataset$time_stamp), 0.7)
# Split the data into training and testing sets based on the split_time
train_data <- subset(dataset, time_stamp <= split_time)
test_data <- subset(dataset, time_stamp > split_time)
train_data <- train_data %>% select(-time_stamp, -sensor_index)
test_data <- test_data %>% select(-time_stamp, -sensor_index)
# Linear Regression Model
linear_model <- lm(pm2.5_atm ~ ., data = train_data)
> linear_model <- lm(pm2.5_atm ~ ., data = train_data)
print("Summary of missing values in training data:")
print(colSums(is.na(train_data)))
# Option 1: Remove rows with missing values
train_data <- na.omit(train_data)
# Linear Regression Model
linear_model <- lm(pm2.5_atm ~ ., data = train_data)
train_data <- na.omit(train_data)
# Linear Regression Model
linear_model <- lm(pm2.5_atm ~ ., data = train_data)
train_data <- na.omit(train_data)
# Linear Regression Model
linear_model <- lm(pm2.5_atm ~ ., data = train_data)
print(colSums(is.na(train_data)))
train_data
# Linear Regression Model
linear_model <- lm(pm2.5_atm ~ ., data = train_data)
print(colSums(is.na(train_data)))
train_data <- na.omit(train_data)
# Linear Regression Model
linear_model <- lm(pm2.5_atm ~ ., data = train_data)
train_data
# Split the data into training and testing sets based on the split_time
train_data <- subset(dataset, time_stamp <= split_time)
train_data
preprocessing_directory <- readr::read_file("inputs/preprocessing_directory.txt")
# Print data dictionary
print_data_dict(dataset, data_title="Final Dataset", descriptions=descriptions, show_na = TRUE)
# devtools::install_github("heba-razzak/createDataDict")
library(createDataDict)
dataset
# get dataframe for descriptions
descriptions <- descriptions_df(dataset)
# Update descriptions dataframe
descriptions <- update_description(descriptions,
c("time_stamp", "pm2.5_atm", "sensor_index", "dow", "hour",
"day", "month", "year", "wknd", "holiday", "b_yes", "b_house",
"b_detached", "b_NA", "b_apartments", "b_school", "b_residential",
"b_retail", "b_commercial", "b_industrial", "b_other", "r_residential",
"r_service", "r_footway", "r_tertiary", "r_secondary", "r_primary",
"r_path", "r_cycleway", "r_motorway", "r_track", "r_motorway_link",
"r_unclassified", "r_other", "num_trees", "mean_speed_motorway",
"mean_speed_motorway_link", "mean_speed_primary", "mean_speed_residential",
"mean_speed_tertiary", "mean_speed_other", "mean_speed_service",
"mean_speed_secondary", "mean_speed_unclassified", "mean_speed_cycleway",
"median_speed_motorway", "median_speed_motorway_link", "median_speed_primary",
"median_speed_residential", "median_speed_tertiary", "median_speed_other",
"median_speed_service", "median_speed_secondary", "median_speed_unclassified",
"median_speed_cycleway", "mean_congestion_motorway", "mean_congestion_motorway_link",
"mean_congestion_primary", "mean_congestion_residential", "mean_congestion_tertiary",
"mean_congestion_other", "mean_congestion_service", "mean_congestion_secondary",
"mean_congestion_unclassified", "mean_congestion_cycleway", "median_congestion_motorway",
"median_congestion_motorway_link", "median_congestion_primary",
"median_congestion_residential", "median_congestion_tertiary", "median_congestion_other",
"median_congestion_service", "median_congestion_secondary",
"median_congestion_unclassified", "median_congestion_cycleway",
"weatherstation", "station_distance", "station_elevation", "x", "y", "z",
"temp_fahrenheit", "rel_humidity", "wind_direction", "wind_speed"),
c("Timestamp of the measurement",
"PM2.5 concentration",
"Unique identifier for sensors",
"Day of the week (1 = Sunday, 2 = Monday, ...)",
"Hour of the day (0-23)",
"Day of the month",
"Month of the year",
"Year of the measurement",
"Weekend indicator (1 if weekend, 0 otherwise)",
"Holiday indicator (1 if holiday, 0 otherwise)",
"Total area of buildings classified as 'yes' (m^2)",
"Total area of houses (m^2)",
"Total area of detached buildings (m^2)",
"Total area of buildings with NA classification (m^2)",
"Total area of apartments (m^2)",
"Total area of schools (m^2)",
"Total area of residential buildings (m^2)",
"Total area of retail buildings (m^2)",
"Total area of commercial buildings (m^2)",
"Total area of industrial buildings (m^2)",
"Total area of other types of buildings (m^2)",
"Total length of residential roads (m)",
"Total length of service roads (m)",
"Total length of footways (m)",
"Total length of tertiary roads (m)",
"Total length of secondary roads (m)",
"Total length of primary roads (m)",
"Total length of paths (m)",
"Total length of cycleways (m)",
"Total length of motorways (m)",
"Total length of tracks (m)",
"Total length of motorway links (m)",
"Total length of unclassified roads (m)",
"Total length of other types of roads (m)",
"Number of trees around sensor",
"Mean speed on motorways (mph)",
"Mean speed on motorway links (mph)",
"Mean speed on primary roads (mph)",
"Mean speed on residential roads (mph)",
"Mean speed on tertiary roads (mph)",
"Mean speed on other roads (mph)",
"Mean speed on service roads (mph)",
"Mean speed on secondary roads (mph)",
"Mean speed on unclassified roads (mph)",
"Mean speed on cycleways (mph)",
"Median speed on motorways (mph)",
"Median speed on motorway links (mph)",
"Median speed on primary roads (mph)",
"Median speed on residential roads (mph)",
"Median speed on tertiary roads (mph)",
"Median speed on other roads (mph)",
"Median speed on service roads (mph)",
"Median speed on secondary roads (mph)",
"Median speed on unclassified roads (mph)",
"Median speed on cycleways (mph)",
"Mean congestion ratio on motorways",
"Mean congestion ratio on motorway links",
"Mean congestion ratio on primary roads",
"Mean congestion ratio on residential roads",
"Mean congestion ratio on tertiary roads",
"Mean congestion ratio on other roads",
"Mean congestion ratio on service roads",
"Mean congestion ratio on secondary roads",
"Mean congestion ratio on unclassified roads",
"Mean congestion ratio on cycleways",
"Median congestion ratio on motorways",
"Median congestion ratio on motorway links",
"Median congestion ratio on primary roads",
"Median congestion ratio on residential roads",
"Median congestion ratio on tertiary roads",
"Median congestion ratio on other roads",
"Median congestion ratio on service roads",
"Median congestion ratio on secondary roads",
"Median congestion ratio on unclassified roads",
"Median congestion ratio on cycleways",
"Weather station identifier",
"Distance to the weather station in meters",
"Elevation of the weather station in meters",
"X-coordinate of the sensor in Cartesian coordinates",
"Y-coordinate of the sensor in Cartesian coordinates",
"Z-coordinate of the sensor in Cartesian coordinates",
"Temperature in Fahrenheit",
"Relative humidity in percentage",
"Wind direction in degrees",
"Wind speed (mph)"))
# Print data dictionary
print_data_dict(dataset, data_title="Final Dataset", descriptions=descriptions, show_na = TRUE)
cat("Number of sensors: ", length(unique(dataset$sensor_index)))
preprocessing_directory <- readr::read_file("inputs/preprocessing_directory.txt")
dataset <- fread(paste0(preprocessing_directory, "/final_dataset.csv"))
dataset <- fread(paste0(preprocessing_directory, "/final_dataset.csv"))
cat("Number of sensors: ", length(unique(dataset$sensor_index)))
# # View initial data dictionary
# print_data_dict(dataset)
# get dataframe for descriptions
descriptions <- descriptions_df(dataset)
# Update descriptions dataframe
descriptions <- update_description(descriptions,
c("time_stamp", "pm2.5_atm", "sensor_index", "dow", "hour",
"day", "month", "year", "wknd", "holiday", "b_yes", "b_house",
"b_detached", "b_NA", "b_apartments", "b_school", "b_residential",
"b_retail", "b_commercial", "b_industrial", "b_other", "r_residential",
"r_service", "r_footway", "r_tertiary", "r_secondary", "r_primary",
"r_path", "r_cycleway", "r_motorway", "r_track", "r_motorway_link",
"r_unclassified", "r_other", "num_trees", "mean_speed_motorway",
"mean_speed_motorway_link", "mean_speed_primary", "mean_speed_residential",
"mean_speed_tertiary", "mean_speed_other", "mean_speed_service",
"mean_speed_secondary", "mean_speed_unclassified", "mean_speed_cycleway",
"median_speed_motorway", "median_speed_motorway_link", "median_speed_primary",
"median_speed_residential", "median_speed_tertiary", "median_speed_other",
"median_speed_service", "median_speed_secondary", "median_speed_unclassified",
"median_speed_cycleway", "mean_congestion_motorway", "mean_congestion_motorway_link",
"mean_congestion_primary", "mean_congestion_residential", "mean_congestion_tertiary",
"mean_congestion_other", "mean_congestion_service", "mean_congestion_secondary",
"mean_congestion_unclassified", "mean_congestion_cycleway", "median_congestion_motorway",
"median_congestion_motorway_link", "median_congestion_primary",
"median_congestion_residential", "median_congestion_tertiary", "median_congestion_other",
"median_congestion_service", "median_congestion_secondary",
"median_congestion_unclassified", "median_congestion_cycleway",
"weatherstation", "station_distance", "station_elevation", "x", "y", "z",
"temp_fahrenheit", "rel_humidity", "wind_direction", "wind_speed"),
c("Timestamp of the measurement",
"PM2.5 concentration",
"Unique identifier for sensors",
"Day of the week (1 = Sunday, 2 = Monday, ...)",
"Hour of the day (0-23)",
"Day of the month",
"Month of the year",
"Year of the measurement",
"Weekend indicator (1 if weekend, 0 otherwise)",
"Holiday indicator (1 if holiday, 0 otherwise)",
"Total area of buildings classified as 'yes' (m^2)",
"Total area of houses (m^2)",
"Total area of detached buildings (m^2)",
"Total area of buildings with NA classification (m^2)",
"Total area of apartments (m^2)",
"Total area of schools (m^2)",
"Total area of residential buildings (m^2)",
"Total area of retail buildings (m^2)",
"Total area of commercial buildings (m^2)",
"Total area of industrial buildings (m^2)",
"Total area of other types of buildings (m^2)",
"Total length of residential roads (m)",
"Total length of service roads (m)",
"Total length of footways (m)",
"Total length of tertiary roads (m)",
"Total length of secondary roads (m)",
"Total length of primary roads (m)",
"Total length of paths (m)",
"Total length of cycleways (m)",
"Total length of motorways (m)",
"Total length of tracks (m)",
"Total length of motorway links (m)",
"Total length of unclassified roads (m)",
"Total length of other types of roads (m)",
"Number of trees around sensor",
"Mean speed on motorways (mph)",
"Mean speed on motorway links (mph)",
"Mean speed on primary roads (mph)",
"Mean speed on residential roads (mph)",
"Mean speed on tertiary roads (mph)",
"Mean speed on other roads (mph)",
"Mean speed on service roads (mph)",
"Mean speed on secondary roads (mph)",
"Mean speed on unclassified roads (mph)",
"Mean speed on cycleways (mph)",
"Median speed on motorways (mph)",
"Median speed on motorway links (mph)",
"Median speed on primary roads (mph)",
"Median speed on residential roads (mph)",
"Median speed on tertiary roads (mph)",
"Median speed on other roads (mph)",
"Median speed on service roads (mph)",
"Median speed on secondary roads (mph)",
"Median speed on unclassified roads (mph)",
"Median speed on cycleways (mph)",
"Mean congestion ratio on motorways",
"Mean congestion ratio on motorway links",
"Mean congestion ratio on primary roads",
"Mean congestion ratio on residential roads",
"Mean congestion ratio on tertiary roads",
"Mean congestion ratio on other roads",
"Mean congestion ratio on service roads",
"Mean congestion ratio on secondary roads",
"Mean congestion ratio on unclassified roads",
"Mean congestion ratio on cycleways",
"Median congestion ratio on motorways",
"Median congestion ratio on motorway links",
"Median congestion ratio on primary roads",
"Median congestion ratio on residential roads",
"Median congestion ratio on tertiary roads",
"Median congestion ratio on other roads",
"Median congestion ratio on service roads",
"Median congestion ratio on secondary roads",
"Median congestion ratio on unclassified roads",
"Median congestion ratio on cycleways",
"Weather station identifier",
"Distance to the weather station in meters",
"Elevation of the weather station in meters",
"X-coordinate of the sensor in Cartesian coordinates",
"Y-coordinate of the sensor in Cartesian coordinates",
"Z-coordinate of the sensor in Cartesian coordinates",
"Temperature in Fahrenheit",
"Relative humidity in percentage",
"Wind direction in degrees",
"Wind speed (mph)"))
# Print data dictionary
print_data_dict(dataset, data_title="Final Dataset", descriptions=descriptions, show_na = TRUE)
