row_output <- paste0(row_output, symbol)
}
hist_output <- paste0(row_output, "\n", hist_output)
}
return(hist_output)
# # Run the txthist function on the example data
# data <- rnorm(100, mean = 50, sd = 10)
# txthist(data)
# cat(txthist(data))
}
txthist(iris)
create_hist(iris)
iris
create_hist(iris$Sepal.Length)
devtools::document()
devtools::document()
rm(list = c("create_hist"))
devtools::load_all()
devtools::document()
usethis::use_tidy_description()
# Test your function manually
cat(create_hist(iris$Sepal.Length))
# Test with missing and infinite values
cat(create_hist(c(1, 2, 3, NA, Inf)))
cat(create_hist(c(1, 2, 3,4,5,6,7,8,8,8,8,8,8 NA, Inf)))
cat(create_hist(c(1, 2, 3,4,5,6,7,8,8,8,8,8,8, NA, Inf)))
devtools::run_examples()
data = iris
# Get table data
num_rows <- nrow(data)
data_title = ""
data = iris
data_title = ""
descriptions = NULL
show_na = TRUE
top_n = 5
data_dictionary(data)
data = iris
data_title = ""
descriptions = NULL
show_na = TRUE
top_n = 5
# Get table data
num_rows <- nrow(data)
# Create the data dictionary table
dict_table <- data.frame(
"Column" = names(data),
"Type" = sapply(data, class),
row.names = NULL
)
# If descriptions are provided, match them to column names
if (!is.null(descriptions)) {
dict_table$Description <- ""
for (col in names(descriptions)) {
dict_table$Description[dict_table$Column == col] <- descriptions[[col]]
}
}
# NA count and percentage
if (show_na) {
nas <- colSums(is.na(data))
nas_pct <- sprintf("%.2f%%", (round(nas / num_rows * 100, 2)))
dict_table$NA_Count <- nas
dict_table$NA_Percentage <- nas_pct
}
# Number of unique values
num_unique <- sapply(data, function(x) length(unique(x)))
dict_table$N_Unique <- num_unique
# Get top n unique values for each column
top_n_values <- sapply(data, function(col) {
unique_vals <- unique(col)
top_vals <- head(sort(table(col), decreasing = TRUE), top_n)
paste(names(top_vals), collapse = ", ")
})
# Add the top n unique values as a new column
dict_table[[paste0("Top_", top_n)]] <- top_n_values
dict_table
data = iris
data_title = ""
descriptions = NULL
show_na = TRUE
top_n = 5
data_dictionary(data)
knitr::kable(dict_table,
align = "llrrrl",
row.names = FALSE,
format = "markdown",
format.args = list(big.mark = ",",
scientific = FALSE))
knitr::kable(dict_table,
align = "llrrrl",
row.names = FALSE,
format = "markdown",
format.args = list(big.mark = ",",
scientific = FALSE))
data_dictionary(data)
data_dictionary(iris)
isTRUE(interactive())
isTRUE(interactive())
isTRUE(interactive())
knitr::is_inknitr()
library(knitr)
knitr::is_inknitr()
isTRUE(getOption('knitr.in.progress'))
cat(data_title, "\n")
cat("Number of rows: ", format(num_rows, big.mark = ",", scientific = F), "\n")
cat("Number of rows with NA:", format(rows_with_na, big.mark = ",", scientific = F), "\n")
# Number of rows with at least one NA
rows_with_na = sum(rowSums(is.na(data)) > 0)
rows_with_na
cat(data_title, "\n")
cat("Number of rows: ", format(num_rows, big.mark = ",", scientific = F), "\n")
cat("Number of rows with NA:", format(rows_with_na, big.mark = ",", scientific = F), "\n")
?knitr::kable
#' data_dictionary
#'
#' Prints data dictionary in markdown
#'
#' @param data
#' @param data_title
#' @param descriptions
#' @param show_na
#' @param top_n
#'
#' @return
#' @export
#'
#' @examples
data_dictionary <- function(data, data_title = "", descriptions = NULL, show_na = TRUE, top_n = 5) {
# Get table data
num_rows <- nrow(data)
# Create the data dictionary table
dict_table <- data.frame(
"Column" = names(data),
"Type" = sapply(data, class),
row.names = NULL
)
# If descriptions are provided, match them to column names
if (!is.null(descriptions)) {
dict_table$Description <- ""
for (col in names(descriptions)) {
dict_table$Description[dict_table$Column == col] <- descriptions[[col]]
}
}
# NA count and percentage
if (show_na) {
nas <- colSums(is.na(data))
nas_pct <- sprintf("%.2f%%", (round(nas / num_rows * 100, 2)))
dict_table$NA_Count <- nas
dict_table$NA_Percentage <- nas_pct
}
# Number of unique values
num_unique <- sapply(data, function(x) length(unique(x)))
dict_table$N_Unique <- num_unique
# Get top n unique values for each column
top_n_values <- sapply(data, function(col) {
unique_vals <- unique(col)
top_vals <- head(sort(table(col), decreasing = TRUE), top_n)
paste(names(top_vals), collapse = ", ")
})
# Add the top n unique values as a new column
dict_table[[paste0("Top_", top_n)]] <- top_n_values
# Number of rows with at least one NA
rows_with_na = sum(rowSums(is.na(data)) > 0)
# Title for data dictionary
# if data_title is missing use dataframe name
if (missing(data_title))  {
data_title <- deparse(substitute(data))
}
# Data dictionary table in better format
formatted_table <- knitr::kable(dict_table,
align = "llrrrl",
row.names = FALSE,
format = "markdown",
format.args = list(big.mark = ",",
scientific = FALSE),
caption = paste0("Data Dictionary for ", data_title))
if (isTRUE(getOption('knitr.in.progress'))) {
# Format for markdown
# Number of rows
cat("**Number of rows:** `", format(num_rows, big.mark = ",", scientific = F),"` \n\n")
cat("**Number of rows with NA:** `", format(rows_with_na, big.mark = ",", scientific = F),"` \n\n")
knitr::asis_output(formatted_table)
} else {
cat("Number of rows: ", format(num_rows, big.mark = ",", scientific = F), "\n")
cat("Number of rows with NA:", format(rows_with_na, big.mark = ",", scientific = F), "\n")
print(formatted_table)
}
}
data_dictionary(iris)
data_dictionary(iris)
?kable
#' data_dictionary
#'
#' Prints data dictionary in markdown
#'
#' @param data
#' @param data_title
#' @param descriptions
#' @param show_na
#' @param top_n
#'
#' @return
#' @export
#'
#' @examples
data_dictionary <- function(data, data_title = "", descriptions = NULL, show_na = TRUE, top_n = 5) {
# Get table data
num_rows <- nrow(data)
# Create the data dictionary table
dict_table <- data.frame(
"Column" = names(data),
"Type" = sapply(data, class),
row.names = NULL
)
# If descriptions are provided, match them to column names
if (!is.null(descriptions)) {
dict_table$Description <- ""
for (col in names(descriptions)) {
dict_table$Description[dict_table$Column == col] <- descriptions[[col]]
}
}
# NA count and percentage
if (show_na) {
nas <- colSums(is.na(data))
nas_pct <- sprintf("%.2f%%", (round(nas / num_rows * 100, 2)))
dict_table$NA_Count <- nas
dict_table$NA_Percentage <- nas_pct
}
# Number of unique values
num_unique <- sapply(data, function(x) length(unique(x)))
dict_table$N_Unique <- num_unique
# Get top n unique values for each column
top_n_values <- sapply(data, function(col) {
unique_vals <- unique(col)
top_vals <- head(sort(table(col), decreasing = TRUE), top_n)
paste(names(top_vals), collapse = ", ")
})
# Add the top n unique values as a new column
dict_table[[paste0("Top_", top_n)]] <- top_n_values
# Number of rows with at least one NA
rows_with_na = sum(rowSums(is.na(data)) > 0)
# Title for data dictionary
# if data_title is missing use dataframe name
if (missing(data_title))  {
data_title <- deparse(substitute(data))
}
# Data dictionary table in better format
formatted_table <- knitr::kable(dict_table,
# align = "llrrrl",
row.names = FALSE,
format = "markdown",
format.args = list(big.mark = ",",
scientific = FALSE),
caption = paste0("Data Dictionary for ", data_title))
if (isTRUE(getOption('knitr.in.progress'))) {
# Format for markdown
# Number of rows
cat("**Number of rows:\t\t** `", format(num_rows, big.mark = ",", scientific = F),"` \n\n")
cat("**Number of rows with NA:\t\t** `", format(rows_with_na, big.mark = ",", scientific = F),"` \n\n")
knitr::asis_output(formatted_table)
} else {
cat("Number of rows:\t\t", format(num_rows, big.mark = ",", scientific = F), "\n")
cat("Number of rows with NA:\t\t", format(rows_with_na, big.mark = ",", scientific = F), "\n")
print(formatted_table)
}
}
data = iris
data_title = ""
descriptions = NULL
show_na = TRUE
top_n = 5
data_dictionary(iris)
#' data_dictionary
#'
#' Prints data dictionary in markdown
#'
#' @param data
#' @param data_title
#' @param descriptions
#' @param show_na
#' @param top_n
#'
#' @return
#' @export
#'
#' @examples
data_dictionary <- function(data, data_title = "", descriptions = NULL, show_na = TRUE, top_n = 5) {
# Get table data
num_rows <- nrow(data)
# Create the data dictionary table
dict_table <- data.frame(
"Column" = names(data),
"Type" = sapply(data, class),
row.names = NULL
)
# If descriptions are provided, match them to column names
if (!is.null(descriptions)) {
dict_table$Description <- ""
for (col in names(descriptions)) {
dict_table$Description[dict_table$Column == col] <- descriptions[[col]]
}
}
# NA count and percentage
if (show_na) {
nas <- colSums(is.na(data))
nas_pct <- sprintf("%.2f%%", (round(nas / num_rows * 100, 2)))
dict_table$NA_Count <- nas
dict_table$NA_Percentage <- nas_pct
}
# Number of unique values
num_unique <- sapply(data, function(x) length(unique(x)))
dict_table$N_Unique <- num_unique
# Get top n unique values for each column
top_n_values <- sapply(data, function(col) {
unique_vals <- unique(col)
top_vals <- head(sort(table(col), decreasing = TRUE), top_n)
paste(names(top_vals), collapse = ", ")
})
# Add the top n unique values as a new column
dict_table[[paste0("Top_", top_n)]] <- top_n_values
# Number of rows with at least one NA
rows_with_na = sum(rowSums(is.na(data)) > 0)
# Title for data dictionary
# if data_title is missing use dataframe name
if (missing(data_title))  {
data_title <- deparse(substitute(data))
}
# Data dictionary table in better format
formatted_table <- knitr::kable(dict_table,
# align = "llrrrl",
row.names = FALSE,
format = "markdown",
format.args = list(big.mark = ",",
scientific = FALSE),
caption = paste0("Data Dictionary for ", data_title))
if (isTRUE(getOption('knitr.in.progress'))) {
# Format for markdown
# Number of rows
cat("**Number of rows:\t\t** `", format(num_rows, big.mark = ",", scientific = F),"` \n\n")
cat("**Number of rows with NA:\t** `", format(rows_with_na, big.mark = ",", scientific = F),"` \n\n")
knitr::asis_output(formatted_table)
} else {
cat("Number of rows:\t\t", format(num_rows, big.mark = ",", scientific = F), "\n")
cat("Number of rows with NA:\t", format(rows_with_na, big.mark = ",", scientific = F), "\n")
print(formatted_table)
}
}
data_dictionary(iris)
#' data_dictionary
#'
#' Prints data dictionary in markdown
#'
#' @param data
#' @param data_title
#' @param descriptions
#' @param show_na
#' @param top_n
#'
#' @return
#' @export
#'
#' @examples
data_dictionary <- function(data, data_title = "", descriptions = NULL, show_na = TRUE, top_n = 5) {
# Get table data
num_rows <- nrow(data)
# Create the data dictionary table
dict_table <- data.frame(
"Column" = names(data),
"Type" = sapply(data, class),
row.names = NULL
)
# If descriptions are provided, match them to column names
if (!is.null(descriptions)) {
dict_table$Description <- ""
for (col in names(descriptions)) {
dict_table$Description[dict_table$Column == col] <- descriptions[[col]]
}
}
# NA count and percentage
if (show_na) {
nas <- colSums(is.na(data))
nas_pct <- sprintf("%.2f%%", (round(nas / num_rows * 100, 2)))
dict_table$NA_Count <- nas
dict_table$NA_Percentage <- nas_pct
}
# Number of unique values
num_unique <- sapply(data, function(x) length(unique(x)))
dict_table$N_Unique <- num_unique
# Get top n unique values for each column
top_n_values <- sapply(data, function(col) {
unique_vals <- unique(col)
top_vals <- head(sort(table(col), decreasing = TRUE), top_n)
paste(names(top_vals), collapse = ", ")
})
# Add the top n unique values as a new column
dict_table[[paste0("Top_", top_n)]] <- top_n_values
# Number of rows with at least one NA
rows_with_na = sum(rowSums(is.na(data)) > 0)
# Title for data dictionary
# if data_title is missing use dataframe name
if (missing(data_title))  {
data_title <- deparse(substitute(data))
}
# Data dictionary table in better format
formatted_table <- knitr::kable(dict_table,
align = "c",
row.names = FALSE,
format = "markdown",
format.args = list(big.mark = ",",
scientific = FALSE),
caption = paste0("Data Dictionary for ", data_title))
if (isTRUE(getOption('knitr.in.progress'))) {
# Format for markdown
# Number of rows
cat("**Number of rows:\t\t** `", format(num_rows, big.mark = ",", scientific = F),"` \n\n")
cat("**Number of rows with NA:\t** `", format(rows_with_na, big.mark = ",", scientific = F),"` \n\n")
knitr::asis_output(formatted_table)
} else {
cat("Number of rows:\t\t", format(num_rows, big.mark = ",", scientific = F), "\n")
cat("Number of rows with NA:\t", format(rows_with_na, big.mark = ",", scientific = F), "\n")
print(formatted_table)
}
}
data_dictionary(iris)
data_dictionary(iris)
#' data_dictionary
#'
#' Prints data dictionary in markdown
#'
#' @param data
#' @param data_title
#' @param descriptions
#' @param show_na
#' @param top_n
#'
#' @return
#' @export
#'
#' @examples
data_dictionary <- function(data, data_title = "", descriptions = NULL, show_na = TRUE, top_n = 5) {
# Get table data
num_rows <- nrow(data)
# Create the data dictionary table
dict_table <- data.frame(
"Column" = names(data),
"Type" = sapply(data, class),
row.names = NULL
)
# If descriptions are provided, match them to column names
if (!is.null(descriptions)) {
dict_table$Description <- ""
for (col in names(descriptions)) {
dict_table$Description[dict_table$Column == col] <- descriptions[[col]]
}
}
# NA count and percentage
if (show_na) {
nas <- colSums(is.na(data))
nas_pct <- sprintf("%.2f%%", (round(nas / num_rows * 100, 2)))
dict_table$NA_Count <- nas
dict_table$NA_Percentage <- nas_pct
}
# Number of unique values
num_unique <- sapply(data, function(x) length(unique(x)))
dict_table$N_Unique <- num_unique
# Get top n unique values for each column
top_n_values <- sapply(data, function(col) {
unique_vals <- unique(col)
top_vals <- head(sort(table(col), decreasing = TRUE), top_n)
paste(names(top_vals), collapse = ", ")
})
# Add the top n unique values as a new column
dict_table[[paste0("Top_", top_n)]] <- top_n_values
# Number of rows with at least one NA
rows_with_na = sum(rowSums(is.na(data)) > 0)
# Title for data dictionary
# if data_title is missing use dataframe name
if (missing(data_title))  {
data_title <- deparse(substitute(data))
}
# Format row numbers with commas
rows_text <- format(num_rows, big.mark = ",", scientific = F)
rows_na_text <- format(rows_with_na, big.mark = ",", scientific = F)
# Data dictionary table in better format
formatted_table <- knitr::kable(dict_table,
align = "c",
row.names = FALSE,
format = "markdown",
format.args = list(big.mark = ",",
scientific = FALSE),
caption = paste0("Data Dictionary for ", data_title))
# If file is being knit, use markdown formatting for text
if (isTRUE(getOption('knitr.in.progress'))) {
cat("**Number of rows:\t\t** `", rows_text,"` \n\n")
cat("**Number of rows with NA:\t** `", rows_na_text,"` \n\n")
knitr::asis_output(formatted_table)
} else {
cat("Number of rows:\t\t", rows_text, "\n")
cat("Number of rows with NA:\t", rows_na_text, "\n")
print(formatted_table)
}
}
data_dictionary(iris)
devtools::install()
rm(data_dictionary)
devtools::install()
devtools::install()
devtools::install()
devtools::document()
remove.packages("DataOverviewR")
devtools::install()
remove.packages("DataOverviewR")
