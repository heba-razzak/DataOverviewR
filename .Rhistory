usethis::use_readme_md()
descriptions = print_descriptions_df(mtcars)
```
library(createDataDict)
print_descriptions_df(mtcars)
descriptions = print_descriptions_df(mtcars)
descriptions = data.frame(Variable = c('mpg',
'cyl',
'disp',
'hp',
'drat',
'wt',
'qsec',
'vs',
'am',
'gear',
'carb'),
Description = c('mpg_description',
'cyl_description',
'disp_description',
'hp_description',
'drat_description',
'wt_description',
'qsec_description',
'vs_description',
'am_description',
'gear_description',
'carb_description'))
print_data_dict(mtcars, title = "Cars", descriptions = descriptions)
devtools::document()
getwd()
lintr::lint(“createDataDict.R”)
library(lintr)
lintr::lint(“createDataDict.R”)
lintr::lint("createDataDict.R")
lintr::lint("R/createDataDict.R")
lintr::lint("R/createDataDict.R")
print_data_dict(mtcars, title = "Cars", descriptions = descriptions)
#' Generate Skeleton for Variable Descriptions
#'
#' Generates a skeleton code to create a dataframe containing variable names
#' and their corresponding descriptions.
#' It is designed to simplify the process of creating input for
#' \code{\link{print_data_dict}} function by providing a template for describing
#' variables in a dataset.
#'
#' @param data The dataset for which the data dictionary is to be printed.
#'
#' @return None
#' @export
#'
#' @examples
#' print_descriptions_df(mtcars)
print_descriptions_df <- function(data) {
# Get variable names
variables <- names(data)
# Initialize vectors to store variable names and descriptions
variables_txt <- paste0("'", variables, "'", collapse =
",\n                                       ")
desc_txt <- paste0("'", variables, "_description'", collapse =
",\n                                         ")
# Construct Output Text
txt1 <- "descriptions = data.frame(Variable = c("
txt2 <- "),\n                          Description = c("
txt3 <- "))"
txt <- paste0(txt1, variables_txt, txt2, desc_txt, txt3)
# Print the output
cat(txt)
}
#' Print Data Dictionary
#'
#' Creates a data dictionary for the dataset using attributes from the data
#' and description if provided.
#' Adapted from the data_dict_md function from the explore package.
#' Source: https://rdrr.io/cran/explore/src/R/tools.R
#'
#' @param data The dataset for which the data dictionary is to be printed.
#' @param title The title for the data dictionary (optional).
#' @param descriptions A data frame providing detailed descriptions for
#' variables (optional).
#'
#' @return None
#' @export
#'
#' @examples
#' descriptions = print_descriptions_df(mtcars)
#' print_data_dict(mtcars, title = "Cars", descriptions = descriptions)
print_data_dict <- function(data, title = "", descriptions = NULL) {
# Load packages
if (!require("dplyr")) {
install.packages("dplyr")
library(dplyr)
}
##################
# Get Table Data #
##################
num_rows <- nrow(data)
variables <- names(data)
types <- sapply(data, function(x) class(x)[1])
nas <- colSums(is.na(data))
nas_pct <- round(nas / num_rows * 100, 1)
unique_vals <- sapply(data, function(x) length(unique(x)))
# Create the data dictionary table
dict_table <- data.frame(
"Variable" = variables,
"Type" = types,
"NA" = nas,
`%NA` = nas_pct,
"Unique" = unique_vals,
check.names = FALSE
)
####################
# Add Descriptions #
####################
# Join detailed descriptions
if (!is.null(descriptions)) {
descriptions$Variable <- as.character(descriptions$Variable)
descriptions$Description <- as.character(descriptions$Description)
dict_table <- dict_table %>% dplyr::left_join(descriptions, by = "Variable")
# Replace NA with blanks
dict_table <- dict_table[is.na(dict_table)] <- ""
} else {
dict_table$Description <- ""
}
# Convert data dict table to markdown
md_dict <- knitr::kable(dict_table, format = "markdown")
md_dict <- paste(md_dict, collapse = "\n")
#########################
# Construct Output Text #
#########################
# Initialize txt
txt <- ""
# Title
if (!missing(title))  {
txt <- paste0(txt, "## **", title, "**", "  \n")
} else {
# if there is no title use dataframe name
title <- deparse(substitute(data))
txt <- paste0(txt, "## **", title, "**", "  \n")
}
# Number of rows
txt <- paste0(txt, "**Number of Rows**: `", num_rows, "`\n\n")
# Markdown table
txt <- paste0(txt, md_dict, "\n")
# Print the output
cat(txt)
}
print_data_dict(mtcars, title = "Cars", descriptions = descriptions)
?print_data_dict
print_data_dict <- function(data, title = "", descriptions = NULL) {
# Load packages
if (!require("dplyr")) {
install.packages("dplyr")
library(dplyr)
}
##################
# Get Table Data #
##################
num_rows <- nrow(data)
variables <- names(data)
types <- sapply(data, function(x) class(x)[1])
nas <- colSums(is.na(data))
nas_pct <- round(nas / num_rows * 100, 1)
unique_vals <- sapply(data, function(x) length(unique(x)))
# Create the data dictionary table
dict_table <- data.frame(
"Variable" = variables,
"Type" = types,
"NA" = nas,
`%NA` = nas_pct,
"Unique" = unique_vals,
check.names = FALSE
)
####################
# Add Descriptions #
####################
# Join detailed descriptions
if (!is.null(descriptions)) {
descriptions$Variable <- as.character(descriptions$Variable)
descriptions$Description <- as.character(descriptions$Description)
dict_table <- dict_table %>% dplyr::left_join(descriptions, by = "Variable")
# Replace NA with blanks
dict_table <- dict_table[is.na(dict_table)] <- ""
} else {
dict_table$Description <- ""
}
# Convert data dict table to markdown
md_dict <- knitr::kable(dict_table, format = "markdown")
md_dict <- paste(md_dict, collapse = "\n")
#########################
# Construct Output Text #
#########################
# Initialize txt
txt <- ""
# Title
if (!missing(title))  {
txt <- paste0(txt, "## **", title, "**", "  \n")
} else {
# if there is no title use dataframe name
title <- deparse(substitute(data))
txt <- paste0(txt, "## **", title, "**", "  \n")
}
# Number of rows
txt <- paste0(txt, "**Number of Rows**: `", num_rows, "`\n\n")
# Markdown table
txt <- paste0(txt, md_dict, "\n")
# Print the output
cat(txt)
}
print_data_dict(mtcars)
descriptions
print_data_dict(mtcars, title = "Cars", descriptions = descriptions)
print_data_dict(mtcars, title = "Cars")
data <- mtcars
num_rows <- nrow(data)
variables <- names(data)
types <- sapply(data, function(x) class(x)[1])
nas <- colSums(is.na(data))
nas_pct <- round(nas / num_rows * 100, 1)
unique_vals <- sapply(data, function(x) length(unique(x)))
# Create the data dictionary table
dict_table <- data.frame(
"Variable" = variables,
"Type" = types,
"NA" = nas,
`%NA` = nas_pct,
"Unique" = unique_vals,
check.names = FALSE
)
dict_table
descriptions
descriptions$Variable <- as.character(descriptions$Variable)
descriptions
descriptions$Description <- as.character(descriptions$Description)
dict_table
dict_table <- dict_table %>% dplyr::left_join(descriptions, by = "Variable")
dict_table
# Replace NA with blanks
dict_table <- dict_table[is.na(dict_table)] <- ""
dict_table
descriptions$Variable <- as.character(descriptions$Variable)
# Create the data dictionary table
dict_table <- data.frame(
"Variable" = variables,
"Type" = types,
"NA" = nas,
`%NA` = nas_pct,
"Unique" = unique_vals,
check.names = FALSE
)
descriptions
dict_table <- dict_table %>% dplyr::left_join(descriptions, by = "Variable")
dict_table
dict_table$Description <- ""
dict_table
devtools::install_github("heba-razzak/lim-lab/createDataDict")
library(createDataDict)
print_descriptions_df(mtcars)
descriptions = data.frame(Variable = c('mpg',
'cyl',
'disp',
'hp',
'drat',
'wt',
'qsec',
'vs',
'am',
'gear',
'carb'),
Description = c('mpg_description',
'cyl_description',
'disp_description',
'hp_description',
'drat_description',
'wt_description',
'qsec_description',
'vs_description',
'am_description',
'gear_description',
'carb_description'))
print_data_dict(mtcars, title = "Cars", descriptions = descriptions)
?print_data_dict
print_data_dict(mtcars, title = "Cars", descriptions = NULL)
descriptions = data.frame(Variable = c('mpg',
'cyl',
'disp',
'hp',
'drat',
'wt',
'qsec',
'vs',
'am',
'gear',
'carb'),
Description = c('mpg_description',
'cyl_description',
'disp_description',
'hp_description',
'drat_description',
'wt_description',
'qsec_description',
'vs_description',
'am_description',
'gear_description',
'carb_description'))
descriptions
mtcars
data <- mtcars
num_rows <- nrow(data)
variables <- names(data)
types <- sapply(data, function(x) class(x)[1])
nas <- colSums(is.na(data))
nas_pct <- round(nas / num_rows * 100, 1)
unique_vals <- sapply(data, function(x) length(unique(x)))
# Create the data dictionary table
dict_table <- data.frame(
"Variable" = variables,
"Type" = types,
"NA" = nas,
`%NA` = nas_pct,
"Unique" = unique_vals,
check.names = FALSE
)
# Join detailed descriptions
if (!is.null(descriptions)) {
descriptions$Variable <- as.character(descriptions$Variable)
descriptions$Description <- as.character(descriptions$Description)
dict_table <- dict_table %>% dplyr::left_join(descriptions, by = "Variable")
} else {
dict_table$Description <- ""
}
dict_table
# Convert data dict table to markdown
md_dict <- knitr::kable(dict_table, format = "markdown")
md_dict <- paste(md_dict, collapse = "\n")
# Initialize txt
txt <- ""
# Title
if (!missing(title))  {
txt <- paste0(txt, "## **", title, "**", "  \n")
} else {
# if there is no title use dataframe name
title <- deparse(substitute(data))
txt <- paste0(txt, "## **", title, "**", "  \n")
}
# Number of rows
txt <- paste0(txt, "**Number of Rows**: `", num_rows, "`\n\n")
# Markdown table
txt <- paste0(txt, md_dict, "\n")
# Print the output
cat(txt)
devtools::install_github("heba-razzak/lim-lab/createDataDict")
library(createDataDict)
print_descriptions_df(mtcars)
print_data_dict(mtcars, title = "Cars", descriptions = descriptions)
``` r
``` r
print_data_dict(mtcars, title = "Cars")
# Print the output
cat(txt)
