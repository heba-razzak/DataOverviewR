include_stats = NULL
data <- iris
var_types = c(Petal.Width = "date")
# If no title is provided use dataframe name
if (is.null(data_title)) {
data_title <- deparse(substitute(data))
}
# Ensure it's a data.frame
data <- as.data.frame(data)
# Define default included statistics for each column type
default_include_stats <- list(
numeric = c("mean", "sd", "p0", "p25", "median", "p75", "p100", "mode", "hist"),
character = c("n_unique", "top_counts", "min_char", "max_char"),
factor = c("levels", "n_unique", "top_counts"),
posixct = c("min", "max", "median", "n_unique"),
logical = c("mean", "top_counts"),
date = c("min", "max", "median", "n_unique")
)
# Merge provided include_stats with defaults
if (is.null(include_stats)) {
include_stats <- default_include_stats
} else {
include_stats <- modifyList(default_include_stats, include_stats)
}
# Classify variables if var_types is provided
if (!is.null(var_types)) {
exception_vars <- names(var_types)
default_vars <- setdiff(names(data), exception_vars)
# Classify default variables first
auto_classified_vars <- list(
numeric = default_vars[sapply(data[default_vars], is.numeric)],
character = default_vars[sapply(data[default_vars], is.character)],
factor = default_vars[sapply(data[default_vars], is.factor)],
posixct = default_vars[sapply(data[default_vars], inherits, "POSIXct")],
logical = default_vars[sapply(data[default_vars], is.logical)],
date = default_vars[sapply(data[default_vars], inherits, "Date")]
)
# Classify
for (v in exception_vars) {
auto_classified_vars[[var_types[[v]]]] <- c(auto_classified_vars[[var_types[[v]]]], v)
}
} else {
# Classify all variables if var_types is not provided
var_types <- list(
numeric = names(data)[sapply(data, is.numeric)],
character = names(data)[sapply(data, is.character)],
posixct = names(data)[sapply(data, inherits, "POSIXct")],
logical = names(data)[sapply(data, is.logical)],
date = names(data)[sapply(data, inherits, "Date")],
factor = names(data)[sapply(data, is.factor)]
)
}
# Initialize result list
result <- list()
hist_list <- list()
# Numeric
if (!is.null(var_types$numeric)) {
numeric_stats <- lapply(var_types$numeric, function(var) {
x <- data[[var]]
stats <- list(variable = var)
if ("mean" %in% include_stats$numeric) stats$mean <- mean(x, na.rm = TRUE)
if ("sd" %in% include_stats$numeric) stats$sd <- sd(x, na.rm = TRUE)
if ("min" %in% include_stats$numeric) stats$p0 <- min(x, na.rm = TRUE)
if ("p25" %in% include_stats$numeric) stats$p25 <- quantile(x, 0.25, na.rm = TRUE)
if ("median" %in% include_stats$numeric) stats$median <- median(x, na.rm = TRUE)
if ("p75" %in% include_stats$numeric) stats$p75 <- quantile(x, 0.75, na.rm = TRUE)
if ("max" %in% include_stats$numeric) stats$p100 <- max(x, na.rm = TRUE)
return(as.data.frame(stats, stringsAsFactors = FALSE, row.names = NULL))
})
result$numeric <- do.call(rbind, numeric_stats)
# # Histogram
# if ("hist" %in% include_stats$numeric) {
#   histogram_df <- data.frame(
#     variable = var_types$numeric,
#     histogram = sapply(var_types$numeric, function(var) {
#       create_hist(data[[var]])
#     }), stringsAsFactors = FALSE, row.names = NULL)
# }
}
var_types
var_types
auto_classified_vars
var_types
# Classify all variables if var_types is not provided
var_types <- list(
numeric = names(data)[sapply(data, is.numeric)],
character = names(data)[sapply(data, is.character)],
posixct = names(data)[sapply(data, inherits, "POSIXct")],
logical = names(data)[sapply(data, is.logical)],
date = names(data)[sapply(data, inherits, "Date")],
factor = names(data)[sapply(data, is.factor)]
)
var_types
date_var <- as.Date("2024-01-01")
class(date_var)
# [1] "Date"
detach("package:DataOverviewR", unload = TRUE)
remove.packages("DataOverviewR")
devtools::install()
detach("package:DataOverviewR", unload = TRUE)
remove.packages("DataOverviewR")
devtools::install()
devtools::install()
devtools::install()
remove.packages("DataOverviewR")
devtools::install()
devtools::document()
detach("package:DataOverviewR", unload = TRUE)
remove.packages("DataOverviewR")
devtools::install()
data
data <- iris
nas_pct <- sapply(colSums(is.na(data)) / num_rows * 100, function(x) {
if (x == 0) {
return("")  # Leave empty for 0%
} else {
return(sprintf("%.0f%%", x))  # Show percentage for non-zero values
}
})
num_rows = nrows(data)
# Number of rows
num_rows <- nrow(data)
# Number of rows that have missing values
rows_with_na = sum(rowSums(is.na(data)) > 0)
nas_pct <- sapply(colSums(is.na(data)) / num_rows * 100, function(x) {
if (x == 0) {
return("")  # Leave empty for 0%
} else {
return(sprintf("%.0f%%", x))  # Show percentage for non-zero values
}
})
nas_pct
detach("package:DataOverviewR", unload = TRUE)
detach("package:DataOverviewR", unload = TRUE)
remove.packages("DataOverviewR")
devtools::install()
purpleair_directory <- readr::read_file("inputs/purpleair_directory.txt")
start_date <- as.Date("2018-01-01")
end_date <- as.Date("2019-12-31")
purpleair_data <- read.csv("/Users/heba/Documents/GitHub/AirQualitySF/Purple Air/purpleair_2018-01-01_2019-12-31.csv")
var_types = c(time_stamp = "date")
data <- purpleair_data
data_title = "PurpleAir Bay Area Hourly 2018-2019"
# If no title is provided use dataframe name
if (is.null(data_title)) {
data_title <- deparse(substitute(data))
}
# Ensure it's a data.frame
data <- as.data.frame(data)
# Define default included statistics for each column type
default_include_stats <- list(
numeric = c("mean", "sd", "p0", "p25", "median", "p75", "p100", "mode", "hist"),
character = c("n_unique", "top_counts", "min_char", "max_char"),
factor = c("levels", "n_unique", "top_counts"),
posixct = c("min", "max", "median", "n_unique"),
logical = c("mean", "top_counts"),
date = c("min", "max", "median", "n_unique")
)
default_include_stats
# Merge provided include_stats with defaults
if (is.null(include_stats)) {
include_stats <- default_include_stats
} else {
include_stats <- modifyList(default_include_stats, include_stats)
}
include_stats = NULL
# Merge provided include_stats with defaults
if (is.null(include_stats)) {
include_stats <- default_include_stats
} else {
include_stats <- modifyList(default_include_stats, include_stats)
}
include_stats
# Classify variables if var_types is provided
if (!is.null(var_types)) {
exception_vars <- names(var_types)
default_vars <- setdiff(names(data), exception_vars)
# Classify default variables first
generated_types <- list(
numeric = default_vars[sapply(data[default_vars], is.numeric)],
character = default_vars[sapply(data[default_vars], is.character)],
factor = default_vars[sapply(data[default_vars], is.factor)],
posixct = default_vars[sapply(data[default_vars], inherits, "POSIXct")],
logical = default_vars[sapply(data[default_vars], is.logical)],
date = default_vars[sapply(data[default_vars], inherits, "Date")]
)
# Classify others
for (v in exception_vars) {
generated_types[[var_types[[v]]]] <- c(generated_types[[var_types[[v]]]], v)
}
} else {
# Classify all variables if var_types is not provided
generated_types <- list(
numeric = names(data)[sapply(data, is.numeric)],
character = names(data)[sapply(data, is.character)],
posixct = names(data)[sapply(data, inherits, "POSIXct")],
logical = names(data)[sapply(data, is.logical)],
date = names(data)[sapply(data, inherits, "Date")],
factor = names(data)[sapply(data, is.factor)]
)
}
generated_types
# Initialize result list
result <- list()
hist_list <- list()
# Numeric
if (!is.null(generated_types$numeric)) {
numeric_stats <- lapply(generated_types$numeric, function(var) {
x <- data[[var]]
stats <- list(variable = var)
if ("mean" %in% include_stats$numeric) stats$mean <- mean(x, na.rm = TRUE)
if ("sd" %in% include_stats$numeric) stats$sd <- sd(x, na.rm = TRUE)
if ("min" %in% include_stats$numeric) stats$p0 <- min(x, na.rm = TRUE)
if ("p25" %in% include_stats$numeric) stats$p25 <- quantile(x, 0.25, na.rm = TRUE)
if ("median" %in% include_stats$numeric) stats$median <- median(x, na.rm = TRUE)
if ("p75" %in% include_stats$numeric) stats$p75 <- quantile(x, 0.75, na.rm = TRUE)
if ("max" %in% include_stats$numeric) stats$p100 <- max(x, na.rm = TRUE)
return(as.data.frame(stats, stringsAsFactors = FALSE, row.names = NULL))
})
result$numeric <- do.call(rbind, numeric_stats)
# # Histogram
# if ("hist" %in% include_stats$numeric) {
#   histogram_df <- data.frame(
#     variable = generated_types$numeric,
#     histogram = sapply(generated_types$numeric, function(var) {
#       create_hist(data[[var]])
#     }), stringsAsFactors = FALSE, row.names = NULL)
# }
}
result
result
# Character
if (!is.null(generated_types$character)) {
character_stats <- lapply(generated_types$character, function(var) {
x <- data[[var]]
x <- as.character(x)
stats <- list(variable = var)
if ("n_unique" %in% include_stats$character) stats$n_unique <- length(unique(x))
if ("min_char" %in% include_stats$character) stats$min_char <- min(nchar(x), na.rm = TRUE)
if ("max_char" %in% include_stats$character) stats$max_char <- max(nchar(x), na.rm = TRUE)
if ("top_counts" %in% include_stats$character) {
n <- 3  # Number of top values to extract
top_vals <- head(sort(table(x), decreasing = TRUE), n)
stats$top_counts <- paste(names(top_vals), top_vals, sep = ": ", collapse = ", ")
}
return(as.data.frame(stats, stringsAsFactors = FALSE, row.names = NULL))
})
result$character <- do.call(rbind, character_stats)
}
# Factor
if (!is.null(generated_types$factor)) {
factor_stats <- lapply(generated_types$factor, function(var) {
x <- data[[var]]
stats <- list(variable = var)
if ("levels" %in% include_stats$factor) stats$levels <- paste(levels(x), collapse = ", ")
if ("n_unique" %in% include_stats$factor) stats$n_unique <- length(unique(x))
if ("min_char" %in% include_stats$factor) stats$min_char <- min(nchar(x), na.rm = TRUE)
if ("max_char" %in% include_stats$factor) stats$max_char <- max(nchar(x), na.rm = TRUE)
if ("top_counts" %in% include_stats$factor) {
n <- 3  # Number of top values to extract (can be changed)
top_vals <- head(sort(table(x), decreasing = TRUE), n)
stats$top_counts <- paste(names(top_vals), top_vals, sep = ": ", collapse = ", ")
}
return(as.data.frame(stats, stringsAsFactors = FALSE, row.names = NULL))
})
result$factor <- do.call(rbind, factor_stats)
}
# Logical
if (!is.null(generated_types$logical)) {
logical_stats <- lapply(generated_types$logical, function(var) {
x <- data[[var]]
stats <- list(
variable = var
)
if ("mean" %in% include_stats$logical) stats$mean <- mean(x, na.rm = TRUE)
if ("top_counts" %in% include_stats$logical) {
top_counts <- sort(table(x), decreasing = TRUE)
stats$top_counts <- paste(names(top_counts), top_counts, sep = ": ", collapse = ", ")
}
return(as.data.frame(stats, stringsAsFactors = FALSE, row.names = NULL))
})
result$logical <- do.call(rbind, logical_stats)
}
# POSIXct
if (!is.null(generated_types$posixct)) {
posixct_stats <- lapply(generated_types$posixct, function(var) {
x <- data[[var]]
stats <- list(variable = var)
if ("min" %in% include_stats$posixct) stats$min <- min(x, na.rm = TRUE)
if ("max" %in% include_stats$posixct) stats$max <- max(x, na.rm = TRUE)
if ("median" %in% include_stats$posixct) stats$median <- median(x, na.rm = TRUE)
if ("n_unique" %in% include_stats$posixct) stats$n_unique <- length(unique(x))
return(as.data.frame(stats, stringsAsFactors = FALSE, row.names = NULL))
})
result$posixct <- do.call(rbind, posixct_stats)
}
# Date
if (!is.null(generated_types$date)) {
date_stats <- lapply(generated_types$date, function(var) {
x <- data[[var]]
x <- as.POSIXct(x)
stats <- list(variable = var)
if ("min" %in% include_stats$date) stats$min <- min(x, na.rm = TRUE)
if ("max" %in% include_stats$date) stats$max <- max(x, na.rm = TRUE)
if ("median" %in% include_stats$date) stats$median <- median(x, na.rm = TRUE)
if ("n_unique" %in% include_stats$date) stats$n_unique <- length(unique(x))
return(as.data.frame(stats, stringsAsFactors = FALSE, row.names = NULL))
})
result$date <- do.call(rbind, date_stats)
}
generated_types$date
date_stats
x
result
formatted_tables
# Number of rows, and NA rows
rows_text <- format(nrow(data), big.mark = ",", scientific = F)
rows_na_text <- format(sum(rowSums(is.na(data)) > 0), big.mark = ",", scientific = F)
date_stats
# Initialize an empty list to store the formatted tables
formatted_tables <- list()
formatted_tables_console <- list()
# Format all tables in result and store them in formatted_table
for (var_type in names(result)) {
var_stats <- result[[var_type]]  # Get the dataframe for each variable type
# Generate the knitr::kable output and store it in the list
formatted_table <- knitr::kable(var_stats,
align = "c",
row.names = FALSE,
format = "markdown",
caption = var_type,
digits = 2,
format.args = list(big.mark = ",",
scientific = FALSE))
formatted_tables[[var_type]] <- paste(formatted_table, collapse = "\n")
formatted_tables_console[[var_type]] <- formatted_table
}
# Print output (markdown for knitting or console text otherwise)
if (isTRUE(getOption('knitr.in.progress'))) {
# Create the markdown output
markdown_output <- paste0(
"## **", data_title, "**\n\n\n",
"`", rows_text, "` rows\n\n",
"`", rows_na_text, "` rows with missing values\n\n",
paste((formatted_tables), collapse = "\n\n")
)
# Use knitr::asis_output to directly output the markdown
knitr::asis_output(markdown_output)
} else {
# Console output
cat(data_title, "\n\n")
cat(rows_text, "\trows\n")
cat(rows_na_text, "\trows with missing values\n\n")
# Print each formatted table
for (table in formatted_tables_console) {
print(table)
}
}
generated_types$date
x <- data$time_stamp
x <- as.POSIXct(x)
start_time <- now()
start_time <- Sys.time()
x <- as.Date(x)
end_time <- Sys.time()
end_time-start_time
stats <- list(variable = var)
if ("min" %in% include_stats$date) stats$min <- min(x, na.rm = TRUE)
if ("max" %in% include_stats$date) stats$max <- max(x, na.rm = TRUE)
if ("median" %in% include_stats$date) stats$median <- median(x, na.rm = TRUE)
if ("n_unique" %in% include_stats$date) stats$n_unique <- length(unique(x))
as.data.frame(stats, stringsAsFactors = FALSE, row.names = NULL)
# Date
if (!is.null(generated_types$date)) {
date_stats <- lapply(generated_types$date, function(var) {
x <- data[[var]]
x <- as.Date(x)
stats <- list(variable = var)
if ("min" %in% include_stats$date) stats$min <- min(x, na.rm = TRUE)
if ("max" %in% include_stats$date) stats$max <- max(x, na.rm = TRUE)
if ("median" %in% include_stats$date) stats$median <- median(x, na.rm = TRUE)
if ("n_unique" %in% include_stats$date) stats$n_unique <- length(unique(x))
return(as.data.frame(stats, stringsAsFactors = FALSE, row.names = NULL))
})
result$date <- do.call(rbind, date_stats)
}
print(1)
Sys.time()
print(1, Sys.time())
cat(1, Sys.time())
cat(1, Sys.time())
Sys.time()
cat(1, Sys.time())
cat(1, Sys.time())
cat(1, Sys.time())
# Date
if (!is.null(generated_types$date)) {
date_stats <- lapply(generated_types$date, function(var) {
x <- data[[var]]
cat(1, Sys.time())
x <- as.Date(x)
cat(2, Sys.time())
stats <- list(variable = var)
cat(3, Sys.time())
if ("min" %in% include_stats$date) stats$min <- min(x, na.rm = TRUE)
cat(4, Sys.time())
if ("max" %in% include_stats$date) stats$max <- max(x, na.rm = TRUE)
cat(5, Sys.time())
if ("median" %in% include_stats$date) stats$median <- median(x, na.rm = TRUE)
cat(6, Sys.time())
if ("n_unique" %in% include_stats$date) stats$n_unique <- length(unique(x))
cat(7, Sys.time())
return(as.data.frame(stats, stringsAsFactors = FALSE, row.names = NULL))
cat(8, Sys.time())
})
result$date <- do.call(rbind, date_stats)
}
17271383623-17271383432
17271383624-17271383623
17271383625-17271383624
1727138363-17271383627
1727138363
17271383627
date_stats
detach("package:DataOverviewR", unload = TRUE)
remove.packages("DataOverviewR")
devtools::install()
iris
data <- iris
var_desc <- c("Sepal.Length" = "loooodsnkjhvdfgbnska", "Sepal.Width" = "weeeeeisfdsjkfn")
var_desc
names(var_desc)
var_desc <- c("skfdjnerui1", "wkjrhfbgvf2")
var_desc
names(var_desc)
var_desc <- c("skfdjnerui1", "wkjrhfbgvf2")
length(description)
# Create initial descriptions dataframe
descriptions <- data.frame(Variable = names(data), Description = "", stringsAsFactors = FALSE)
length(description)
# variable = NULL, description = NULL
data <- iris
var_desc <- c("skfdjnerui1", "wkjrhfbgvf2")
# Create initial descriptions dataframe
descriptions <- data.frame(Variable = names(data), Description = "", stringsAsFactors = FALSE)
if (is.null(names(var_desc))) {
n <- length(var_desc)
descriptions$Description[1:n] <- var_desc
}
descriptions
for (i in seq_along(var_desc)) {
print(i)
}
for (i in var_desc) {
print(i)
}
for (i in names(var_desc)) {
print(i)
}
for (i in names(var_desc)) {
print(i)
}
var_desc <- c("Sepal.Length" = "loooodsnkjhvdfgbnska", "Sepal.Width" = "weeeeeisfdsjkfn")
for (i in names(var_desc)) {
print(i)
}
descriptions
descriptions$Variable == v
for (v in names(var_desc)) {
descriptions$Description[descriptions$Variable == v] <- var_desc[[v]]
}
descriptions
# Create initial descriptions dataframe
descriptions <- data.frame(Variable = names(data), Description = "", stringsAsFactors = FALSE)
# variable = NULL, description = NULL
data <- iris
var_desc <- c("skfdjnerui1", "wkjrhfbgvf2")
var_desc <- c("Sepal.Length" = "loooodsnkjhvdfgbnska", "Sepal.Width" = "weeeeeisfdsjkfn")
names(var_desc)
# Create initial descriptions dataframe
descriptions <- data.frame(Variable = names(data), Description = "", stringsAsFactors = FALSE)
if (is.null(names(var_desc))) {
n <- length(var_desc)
descriptions$Description[1:n] <- var_desc
} else {
for (v in names(var_desc)) {
descriptions$Description[descriptions$Variable == v] <- var_desc[[v]]
}
# # Update the descriptions for the specified variables
# for (i in seq_along(variable)) {
#   descriptions$Description[descriptions$Variable == variable[i]] <- description[i]
# }
}
descriptions
var_desc <- c("Sepal.Length" = "loooodsnkjhvdfgbnska", "Sepal.Width" = "weeeeeisfdsjkfn", "wefw")
names(var_desc)
detach("package:DataOverviewR", unload = TRUE)
remove.packages("DataOverviewR")
devtools::document()
devtools::install()
devtools::install()
detach("package:DataOverviewR", unload = TRUE)
remove.packages("DataOverviewR")
devtools::install()
devtools::install()
devtools::document()
detach("package:DataOverviewR", unload = TRUE)
remove.packages("DataOverviewR")
devtools::install()
detach("package:DataOverviewR", unload = TRUE)
remove.packages("DataOverviewR")
devtools::install()
