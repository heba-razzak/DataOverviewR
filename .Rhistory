unique_vals <- sapply(data, function(x) length(unique(x)))
# Create the data dictionary table
dict_table <- data.frame(
"Variable" = variables,
"Type" = types,
"NA" = nas,
`%NA` = nas_pct,
"Unique" = unique_vals,
check.names = FALSE
)
####################
# Add Descriptions #
####################
# Join detailed descriptions
if (!is.null(descriptions)) {
descriptions$Variable <- as.character(descriptions$Variable)
descriptions$Description <- as.character(descriptions$Description)
dict_table <- dict_table %>% dplyr::left_join(descriptions, by = "Variable")
} else {
dict_table$Description <- ""
}
# Convert data dict table to markdown
md_dict <- knitr::kable(dict_table, format = "markdown")
md_dict <- paste(md_dict, collapse = "\n")
#########################
# Construct Output Text #
#########################
# Initialize txt
txt <- ""
# Title
if (!missing(title))  {
txt <- paste0(txt, "## **", title, "**", "  \n")
} else {
# if there is no title use dataframe name
title <- deparse(substitute(data))
txt <- paste0(txt, "## **", title, "**", "  \n")
}
# Number of rows
txt <- paste0(txt, "**Number of Rows**: `", num_rows, "`\n\n")
# Markdown table
txt <- paste0(txt, md_dict, "\n\n")
# Print the output
cat(txt)
}
# print skeleton for filling in descriptions
print_descriptions_df(sanfrancell_roads)
# read roads file
sanfrancell_roads <- st_read(paste0(file_directory,"/sanfrangrid_roads_osm.shp"), quiet = TRUE)
# read roads file
sanfrancell_roads <- st_read(paste0(file_directory,"/sanfrangrid_roads_osm.shp"), quiet = TRUE)
# print skeleton for filling in descriptions
print_descriptions_df(sanfrancell_roads)
#' \code{\link{print_data_dict}} function by providing a template for describing
#' variables in a dataset.
#'
#' @param data The dataset for which the data dictionary is to be printed.
#'
#' @return dataframe
#' @export
#'
#' @examples
#' descriptions = descriptions_df(mtcars)
descriptions_df <- function(data) {
# Get variable names
variables <- names(data)
# Initialize vectors to store variable names and descriptions
variables_txt <- paste0("'", variables, "'", collapse =
",\n                                       ")
desc_txt <- paste0("'", variables, "_description'", collapse =
",\n                                         ")
# Construct Output Text
txt1 <- "descriptions = data.frame(Variable = c("
txt2 <- "),\n                          Description = c("
txt3 <- "))\n\n"
txt <- paste0(txt1, variables_txt, txt2, desc_txt, txt3)
# Print the output
return(txt)
}
# print skeleton for filling in descriptions
descriptions_df(sanfrancell_roads)
data <- sanfrancell_roads
# Get variable names
variables <- names(data)
variables
# print skeleton for filling in descriptions
print_descriptions_df(sanfrancell_roads)
paste0("'", variables, "_description'")
paste0(variables, "_description")
# Get variable names
variables <- names(data)
data.frame(Variable = names(data),
Description = paste0(variables, "_description"))
# Return descriptions dataframe
return(descriptions)
#' \code{\link{print_data_dict}} function by providing a template for describing
#' variables in a dataset.
#'
#' @param data The dataset for which the data dictionary is to be printed.
#'
#' @return dataframe
#' @export
#'
#' @examples
#' descriptions = descriptions_df(mtcars)
descriptions_df <- function(data) {
# Get variable names
variables <- names(data)
descriptions = data.frame(Variable = names(data),
Description = paste0(variables, "_description"))
# Return descriptions dataframe
return(descriptions)
}
# print skeleton for filling in descriptions
descriptions_df(sanfrancell_roads)
# edit descriptions dataframe
descriptions['osm_id']
# print skeleton for filling in descriptions
descriptions <- descriptions_df(sanfrancell_roads)
# edit descriptions dataframe
descriptions['osm_id']
descriptions
# edit descriptions dataframe
descriptions$Variable=="osm_id"
# edit descriptions dataframe
descriptions[descriptions$Variable=="osm_id"]
# edit descriptions dataframe
descriptions[descriptions$Variable=="osm_id"]
# edit descriptions dataframe
descriptions[[descriptions$Variable=="osm_id"]]
descriptions$Variable=="osm_id"
descriptions
descriptions[descriptions$Variable=="osm_id"]
# edit descriptions dataframe
descriptions[descriptions$Variable=="osm_id",]
# edit descriptions dataframe
descriptions[descriptions$Variable=="osm_id",]["Description"]
# edit descriptions dataframe
descriptions[descriptions$Variable=="osm_id",]["Description"] <- "Unique Identifier from OpenStreetMap"
descriptions
# Print data dictionary
print_data_dict(sanfrancell_roads, title="OSM Roads", descriptions=descriptions)
library(dplyr) # For data manipulation
library(sf) # For working with spatial data
library(data.table)
# install package from github
library(devtools)
install_github("heba-razzak/createDataDict")
install_github("heba-razzak/createDataDict")
library(createDataDict)
# osm file directory
file_directory = readr::read_file("inputs/osm_directory.txt")
# read roads file
sanfrancell_roads <- st_read(paste0(file_directory,"/sanfrangrid_roads_osm.shp"), quiet = TRUE)
# read roads file
sanfrancell_roads <- st_read(paste0(file_directory,"/sanfrangrid_roads_osm.shp"), quiet = TRUE)
# print skeleton for filling in descriptions
descriptions <- descriptions_df(sanfrancell_roads)
devtools::document()
setwd("/Users/heba/Documents/GitHub/createDataDict")
devtools::document()
rm(list = c("print_data_dict", "print_descriptions_df"))
devtools::document()
rm(list = c("descriptions_df"))
devtools::document()
# print skeleton for filling in descriptions
descriptions <- descriptions_df(sanfrancell_roads)
# edit descriptions dataframe
descriptions[descriptions$Variable=="osm_id",]["Description"] <- "Unique Identifier from OpenStreetMap"
# Print data dictionary
print_data_dict(sanfrancell_roads, title="OSM Roads", descriptions=descriptions)
sanfrancell_roads
descriptions
# print skeleton for filling in descriptions
descriptions <- descriptions_df(sanfrancell_roads)
descriptions
# edit descriptions dataframe
descriptions[descriptions$Variable=="osm_id",]["Description"] <- "Unique Identifier from OpenStreetMap"
# Print data dictionary
print_data_dict(sanfrancell_roads, title="OSM Roads", descriptions=descriptions)
num_rows=12345364324564
format(num_rows, big.mark = ",")
num_rows=123453643
format(num_rows, big.mark = ",")
format(num_rows, big.mark = ",", scientific = FALSE)
num_rows=12345364324564
format(num_rows, big.mark = ",", scientific = FALSE)
nas=1004397
num_rows=1077985
round(nas / num_rows * 100, 1)
round(nas / num_rows * 100)
round(nas / num_rows * 100, 1)
paste0(round(nas / num_rows * 100, 1),"%")
data
num_rows <- nrow(data)
variables <- names(data)
types <- sapply(data, function(x) class(x)[1])
nas <- colSums(is.na(data))
nas_pct <- paste0(round(nas / num_rows * 100, 1),"%")
unique_vals <- sapply(data, function(x) length(unique(x)))
# Create the data dictionary table
dict_table <- data.frame(
"Variable" = variables,
"Type" = types,
"NA" = format(nas, big.mark = ",", scientific = FALSE),
`%NA` = nas_pct,
"Unique" = format(unique_vals, big.mark = ",", scientific = FALSE),
check.names = FALSE
)
descriptions
dict_table
round(nas / num_rows * 100, 2)
paste0(round(nas / num_rows * 100, 2),"%")
sprintf("%.2f%%", (round(nas / num_rows * 100, 2))
)
sprintf("%.2f%%", (round(nas / num_rows * 100, 2)))
nas_pct <- sprintf("%.2f%%", (round(nas / num_rows * 100, 2)))
# Create the data dictionary table
dict_table <- data.frame(
"Variable" = variables,
"Type" = types,
"NA" = format(nas, big.mark = ",", scientific = FALSE),
`%NA` = nas_pct,
"Unique" = format(unique_vals, big.mark = ",", scientific = FALSE),
check.names = FALSE
)
# Join detailed descriptions
if (!is.null(descriptions)) {
descriptions$Variable <- as.character(descriptions$Variable)
descriptions$Description <- as.character(descriptions$Description)
dict_table <- dict_table %>% dplyr::left_join(descriptions, by = "Variable")
} else {
dict_table$Description <- ""
}
dict_table
# Convert data dict table to markdown
md_dict <- knitr::kable(dict_table, format = "markdown")
md_dict
md_dict <- paste(md_dict, collapse = "\n")
md_dict
# Print the output
cat(txt)
num_rows <- nrow(data)
variables <- names(data)
types <- sapply(data, function(x) class(x)[1])
nas <- colSums(is.na(data))
nas_pct <- sprintf("%.2f%%", (round(nas / num_rows * 100, 2)))
unique_vals <- sapply(data, function(x) length(unique(x)))
# Create the data dictionary table
dict_table <- data.frame(
"Variable" = variables,
"Type" = types,
"NA" = format(nas, big.mark = ",", scientific = FALSE),
`%NA` = nas_pct,
"Unique" = format(unique_vals, big.mark = ",", scientific = FALSE),
check.names = FALSE
)
# Join detailed descriptions
if (!is.null(descriptions)) {
descriptions$Variable <- as.character(descriptions$Variable)
descriptions$Description <- as.character(descriptions$Description)
dict_table <- dict_table %>% dplyr::left_join(descriptions, by = "Variable")
} else {
dict_table$Description <- ""
}
# Convert data dict table to markdown
md_dict <- knitr::kable(dict_table, format = "markdown")
md_dict <- paste(md_dict, collapse = "\n")
# Initialize txt
txt <- ""
# Title
if (!missing(title))  {
txt <- paste0(txt, "## **", title, "**", "  \n")
} else {
# if there is no title use dataframe name
title <- deparse(substitute(data))
txt <- paste0(txt, "## **", title, "**", "  \n")
}
# Number of rows
txt <- paste0(txt, "**Number of Rows**: `", format(num_rows, big.mark = ",", scientific = FALSE), "`\n\n")
# Markdown table
txt <- paste0(txt, md_dict, "\n\n")
# Print the output
cat(txt)
title
title
missing(title)
rm(title)
title
data_title
# data_title
if (!missing(data_title))  {
txt <- paste0(txt, "## **", data_title, "**", "  \n")
} else {
# if there is no data_title use dataframe name
data_title <- deparse(substitute(data))
txt <- paste0(txt, "## **", data_title, "**", "  \n")
}
# Number of rows
txt <- paste0(txt, "**Number of Rows**: `", format(num_rows, big.mark = ",", scientific = FALSE), "`\n\n")
# Markdown table
txt <- paste0(txt, md_dict, "\n\n")
# Print the output
cat(txt)
txt
# Initialize txt
txt <- ""
# data_title
if (!missing(data_title))  {
txt <- paste0(txt, "## **", data_title, "**", "  \n")
} else {
# if there is no data_title use dataframe name
data_title <- deparse(substitute(data))
txt <- paste0(txt, "## **", data_title, "**", "  \n")
}
# Number of rows
txt <- paste0(txt, "**Number of Rows**: `", format(num_rows, big.mark = ",", scientific = FALSE), "`\n\n")
# Markdown table
txt <- paste0(txt, md_dict, "\n\n")
# Print the output
cat(txt)
data_title
deparse(substitute(data))
(!missing(data_title))
data_title
md_dict
variables <- names(data)
types <- sapply(data, function(x) class(x)[1])
nas <- colSums(is.na(data))
nas_pct <- sprintf("%.2f%%", (round(nas / num_rows * 100, 2)))
unique_vals <- sapply(data, function(x) length(unique(x)))
# Create the data dictionary table
dict_table <- data.frame(
"Variable" = variables,
"Type" = types,
"NA" = format(nas, big.mark = ",", scientific = FALSE),
`%NA` = nas_pct,
"Unique" = format(unique_vals, big.mark = ",", scientific = FALSE),
check.names = FALSE
)
# Join detailed descriptions
if (!is.null(descriptions)) {
descriptions$Variable <- as.character(descriptions$Variable)
descriptions$Description <- as.character(descriptions$Description)
dict_table <- dict_table %>% dplyr::left_join(descriptions, by = "Variable")
} else {
dict_table$Description <- ""
}
# Convert data dict table to markdown
md_dict <- knitr::kable(dict_table, format = "markdown")
md_dict <- paste(md_dict, collapse = "\n")
num_rows <- nrow(data)
variables <- names(data)
types <- sapply(data, function(x) class(x)[1])
nas <- colSums(is.na(data))
nas_pct <- sprintf("%.2f%%", (round(nas / num_rows * 100, 2)))
unique_vals <- sapply(data, function(x) length(unique(x)))
# Create the data dictionary table
dict_table <- data.frame(
"Variable" = variables,
"Type" = types,
"NA" = format(nas, big.mark = ",", scientific = FALSE),
`%NA` = nas_pct,
"Unique" = format(unique_vals, big.mark = ",", scientific = FALSE),
check.names = FALSE
)
# Join detailed descriptions
if (!is.null(descriptions)) {
descriptions$Variable <- as.character(descriptions$Variable)
descriptions$Description <- as.character(descriptions$Description)
dict_table <- dict_table %>% dplyr::left_join(descriptions, by = "Variable")
} else {
dict_table$Description <- ""
}
dict_table
descriptions = data.frame(Variable = names(data),
Description = "")
#' \code{\link{print_data_dict}} function by providing a template for describing
#' variables in a dataset.
#'
#' @param data The dataset for which the data dictionary is to be printed.
#'
#' @return dataframe
#' @export
#'
#' @examples
#' descriptions = descriptions_df(mtcars)
descriptions_df <- function(data) {
# Get variable names
variables <- names(data)
descriptions = data.frame(Variable = names(data),
Description = "")
# Return descriptions dataframe
return(descriptions)
}
# print skeleton for filling in descriptions
descriptions <- descriptions_df(sanfrancell_roads)
descriptions
update_description <- function(descriptions, variables_descriptions) {
for (variable_description in variables_descriptions) {
if (length(variable_description) != 2) {
stop("Each sublist in variables_descriptions should contain a variable name and its description.")
}
variable <- variable_description[[1]]
description_new <- variable_description[[2]]
descriptions$Description[descriptions$Variable == variable] <- description_new
}
return(descriptions)
}
update_description(descriptions, c(c("osm_id", "Unique Identifier from OpenStreetMap"), c("name", "Name of the entity")))
update_description
c("osm_id", "Unique Identifier from OpenStreetMap")
variables_descriptions
update_description(descriptions, c(c("osm_id", "Unique Identifier from OpenStreetMap"), c("name", "Name of the entity")))
variables_descriptions=c(c("osm_id", "Unique Identifier from OpenStreetMap"), c("name", "Name of the entity"))
variables_descriptions
variables_descriptions[1]
#'
#' @param descriptions A dataframe containing variable descriptions.
#' @param variable The name of the variable for which the description is to be updated.
#' @param description The new description for the variable.
#'
#' @return The updated descriptions dataframe.
#' @export
#'
#' @examples
#'
update_description <- function(descriptions, variable, description) {
descriptions$Description[descriptions$Variable == variable] <- description
return(descriptions)
}
descriptions
update_description(descriptions,"osm_id","Unique identifier for OSM")
update_description(descriptions,c("osm_id","name"),c("Unique identifier for OSM","nnn"))
#'
#' @param descriptions A dataframe containing variable descriptions.
#' @param variable The name of the variable for which the description is to be updated.
#' @param description The new description for the variable.
#'
#' @return The updated descriptions dataframe.
#' @export
#'
#' @examples
#'
update_description <- function(descriptions, variable, description) {
descriptions$Description[descriptions$Variable == variable] <- description
return(descriptions)
}
update_description(descriptions,c("osm_id","name"),c("Unique identifier for OSM","nnn"))
variable=c("osm_id","name")
description=c("Unique identifier for OSM","nnn")
descriptions$Description
descriptions$Variable == variable
variable
update_description(descriptions,c("name","osm_id"),c("Unique identifier for OSM","nnn"))
update_description(descriptions,c("name","osm_id"),c("Unique identifier for OSM","nnn"))
descriptions$Variable == variable
variable=c("name","osm_id")
descriptions$Variable == variable
variable
variable
length(variable)
variable
#'
#' @param descriptions A dataframe containing variable descriptions.
#' @param variable The name of the variable for which the description is to be updated.
#' @param description The new description for the variable.
#'
#' @return The updated descriptions dataframe.
#' @export
#'
#' @examples
#'
update_description <- function(descriptions, variable, description) {
for (i in seq_along(variable)) {
descriptions$Description[descriptions$Variable == variable[i]] <- description[i]
}
return(descriptions)
}
update_description(descriptions,c("name","osm_id"),c("Unique identifier for OSM","nnn"))
update_description(descriptions,c("osm_id","osm_id"),c("Unique identifier for OSM","nnn"))
update_description(descriptions,c("osm_id","name","geom"),c("Unique identifier for OSM","nnn"))
getwd()
devtools::document()
list()
rm(list = c("descriptions_df"))
rm(list = c("update_description"))
devtools::document()
getwd()
dict_table
print(xtable(dict_table), type = "markdown")
print((dict_table), type = "markdown")
kable(dict_table)
library(knitr)
kable(dict_table)
library(rmarkdown)
paged_table(dict_table)
print((dict_table), type = "markdown")
print((dict_table), type = "markdown")
dict_table
?print
print((dict_table), type = "markdown", right=TRUE)
print((dict_table), type = "markdown", right=TRUE)
print((dict_table), type = "markdown", right=FALSE)
TRUE
print((dict_table), type = "markdown", right=TRUE)
print((dict_table), type = "markdown", right=TRUE, justify="right")
knitr::kable(dict_table)
knitr::kable(dict_table, format = "markdown")
devtools::document()
install_github("heba-razzak/createDataDict")
install_github("heba-razzak/createDataDict")
devtools::install_github("heba-razzak/createDataDict")
